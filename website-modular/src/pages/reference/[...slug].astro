---
export const prerender = false;

let { slug } = Astro.params;

import {
    packages,
    join,
    exists,
    readFile,
    modulesPath,
} from '../../utils/paths';

import { unify } from '../../utils/unify';

import {
    getDocument,
    getModuleTypes,
    highlightDefinitions,
    type ModuleTypes,
    sanitizeDefinitions,
} from '../../utils/dom';
import Layout from '../../layouts/Layout.astro';

const modules = {
    app: 'App',
    firestore: 'Firestore',
    storage: 'Storage',
};

const params = slug?.split('/') ?? [];
const [module, ...segments] = params;
slug = segments.join('/');

if (!(module in modules)) {
    return new Response(`Not found: module = ${module}`);
}

// Get the path based on the params
const path =
    params.length === 1
        ? modulesPath(module)
        : join(packages, module, 'docs', `${slug}.md`);

// File must exist.. otherwise 404
if (!exists(path)) {
    return new Response(`Not found: path = ${path}`);
}

// Generate a types dictionary for all modules.
let types: ModuleTypes = {};
Object.keys(modules).forEach((key) => {
    const file = readFile(modulesPath(key));
    const { html } = unify(file);

    types = {
        ...types,
        ...getModuleTypes(getDocument(html)),
    };
});

// Get the file
let file = readFile(path);

// Replace any local URLs to remove the `.md` extension.
file = file.replace(/(?<=\]\()(.*)(\.md)/gm, `$1`);

// Serialize the markdown content via MDX
const { html  } = unify(file);

// Get the document from the converted markdown
const document = getDocument(html);

// Sanitize the generated definitions
sanitizeDefinitions(document);

const title = document.querySelector('h1')?.textContent ?? 'React Native Firebase';
const source = document.body.innerHTML;
---

<Layout {title}>
  <Fragment set:html={source} />
</Layout>
